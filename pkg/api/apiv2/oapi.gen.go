// Package apiv2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package apiv2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// App defines model for App.
type App struct {
	ArchivedAt *time.Time         `json:"archived_at"`
	CreatedAt  time.Time          `json:"created_at"`
	ID         string             `json:"id"`
	InternalID openapi_types.UUID `json:"internal_id"`
}

// AppsResponse defines model for AppsResponse.
type AppsResponse struct {
	Data []App `json:"data"`
}

// Env defines model for Env.
type Env struct {
	ArchivedAt         *time.Time         `json:"archived_at"`
	AutoArchiveEnabled bool               `json:"auto_archive_enabled"`
	CreatedAt          time.Time          `json:"created_at"`
	EnvType            string             `json:"env_type"`
	InternalID         openapi_types.UUID `json:"internal_id"`
	Name               string             `json:"name"`
	Slug               string             `json:"slug"`
}

// AppID defines model for AppID.
type AppID = string

// EnvID defines model for EnvID.
type EnvID = string

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /envs/{env_id})
	GetEnv(w http.ResponseWriter, r *http.Request, envId EnvID)

	// (GET /envs/{env_id}/apps)
	GetApps(w http.ResponseWriter, r *http.Request, envId EnvID)

	// (GET /envs/{env_id}/apps/{app_id})
	GetApp(w http.ResponseWriter, r *http.Request, envId EnvID, appId AppID)

	// (DELETE /envs/{env_id}/apps/{app_id}/archive)
	UnarchiveApp(w http.ResponseWriter, r *http.Request, envId EnvID, appId AppID)

	// (PUT /envs/{env_id}/apps/{app_id}/archive)
	ArchiveApp(w http.ResponseWriter, r *http.Request, envId EnvID, appId AppID)

	// (DELETE /envs/{env_id}/archive)
	UnarchiveEnv(w http.ResponseWriter, r *http.Request, envId EnvID)

	// (PUT /envs/{env_id}/archive)
	ArchiveEnv(w http.ResponseWriter, r *http.Request, envId EnvID)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (GET /envs/{env_id})
func (_ Unimplemented) GetEnv(w http.ResponseWriter, r *http.Request, envId EnvID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /envs/{env_id}/apps)
func (_ Unimplemented) GetApps(w http.ResponseWriter, r *http.Request, envId EnvID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /envs/{env_id}/apps/{app_id})
func (_ Unimplemented) GetApp(w http.ResponseWriter, r *http.Request, envId EnvID, appId AppID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /envs/{env_id}/apps/{app_id}/archive)
func (_ Unimplemented) UnarchiveApp(w http.ResponseWriter, r *http.Request, envId EnvID, appId AppID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PUT /envs/{env_id}/apps/{app_id}/archive)
func (_ Unimplemented) ArchiveApp(w http.ResponseWriter, r *http.Request, envId EnvID, appId AppID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /envs/{env_id}/archive)
func (_ Unimplemented) UnarchiveEnv(w http.ResponseWriter, r *http.Request, envId EnvID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PUT /envs/{env_id}/archive)
func (_ Unimplemented) ArchiveEnv(w http.ResponseWriter, r *http.Request, envId EnvID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetEnv operation middleware
func (siw *ServerInterfaceWrapper) GetEnv(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "env_id" -------------
	var envId EnvID

	err = runtime.BindStyledParameterWithOptions("simple", "env_id", chi.URLParam(r, "env_id"), &envId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "env_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEnv(w, r, envId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApps operation middleware
func (siw *ServerInterfaceWrapper) GetApps(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "env_id" -------------
	var envId EnvID

	err = runtime.BindStyledParameterWithOptions("simple", "env_id", chi.URLParam(r, "env_id"), &envId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "env_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApps(w, r, envId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApp operation middleware
func (siw *ServerInterfaceWrapper) GetApp(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "env_id" -------------
	var envId EnvID

	err = runtime.BindStyledParameterWithOptions("simple", "env_id", chi.URLParam(r, "env_id"), &envId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "env_id", Err: err})
		return
	}

	// ------------- Path parameter "app_id" -------------
	var appId AppID

	err = runtime.BindStyledParameterWithOptions("simple", "app_id", chi.URLParam(r, "app_id"), &appId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "app_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApp(w, r, envId, appId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UnarchiveApp operation middleware
func (siw *ServerInterfaceWrapper) UnarchiveApp(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "env_id" -------------
	var envId EnvID

	err = runtime.BindStyledParameterWithOptions("simple", "env_id", chi.URLParam(r, "env_id"), &envId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "env_id", Err: err})
		return
	}

	// ------------- Path parameter "app_id" -------------
	var appId AppID

	err = runtime.BindStyledParameterWithOptions("simple", "app_id", chi.URLParam(r, "app_id"), &appId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "app_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UnarchiveApp(w, r, envId, appId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ArchiveApp operation middleware
func (siw *ServerInterfaceWrapper) ArchiveApp(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "env_id" -------------
	var envId EnvID

	err = runtime.BindStyledParameterWithOptions("simple", "env_id", chi.URLParam(r, "env_id"), &envId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "env_id", Err: err})
		return
	}

	// ------------- Path parameter "app_id" -------------
	var appId AppID

	err = runtime.BindStyledParameterWithOptions("simple", "app_id", chi.URLParam(r, "app_id"), &appId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "app_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ArchiveApp(w, r, envId, appId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UnarchiveEnv operation middleware
func (siw *ServerInterfaceWrapper) UnarchiveEnv(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "env_id" -------------
	var envId EnvID

	err = runtime.BindStyledParameterWithOptions("simple", "env_id", chi.URLParam(r, "env_id"), &envId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "env_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UnarchiveEnv(w, r, envId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ArchiveEnv operation middleware
func (siw *ServerInterfaceWrapper) ArchiveEnv(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "env_id" -------------
	var envId EnvID

	err = runtime.BindStyledParameterWithOptions("simple", "env_id", chi.URLParam(r, "env_id"), &envId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "env_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ArchiveEnv(w, r, envId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/envs/{env_id}", wrapper.GetEnv)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/envs/{env_id}/apps", wrapper.GetApps)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/envs/{env_id}/apps/{app_id}", wrapper.GetApp)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/envs/{env_id}/apps/{app_id}/archive", wrapper.UnarchiveApp)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/envs/{env_id}/apps/{app_id}/archive", wrapper.ArchiveApp)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/envs/{env_id}/archive", wrapper.UnarchiveEnv)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/envs/{env_id}/archive", wrapper.ArchiveEnv)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xVzW7bMAx+lYDbUYmD7uZbgBZFbsOAnYoiUGwmUWFLmkQbKwy9+0DZSZ3aSdYi3Xqy",
	"LVHk90PRDWSmtEajJg9pA1Y6WSKhi18La5e3/KI0pGAl7UCAliVCCtLalcpBgMNflXKYQ0quQgE+22Ep",
	"+RQ9W4705JTeQggC7nR9MiHq+q0Jw35zjzZScMaiI4VxUbpsp2rMV5L4c2NcyW+QS8IpqRIZQFUUcl3g",
	"vuCrMgIyh5LO5xicUfkQsYDf062ZdoSXtzFOEzoti1V74JC8qqIYZxN0RzlR6Ov20EccoRzXeTzkNesn",
	"zIhxLKz1P9Bboz0OZcwlRQcUYRkXvjrcQApfkpf+STovEjYiHEpI5+TzAGBMOIbjTtcf5KKsyKy6TCvU",
	"HNv3aG1MgVK/129u33axGWmG65i8vysjFXxRbcfvXF/1vo4nBBHHvXOgdUyiQ9LVHfoYIumNiZAUFS0T",
	"vUVPk8X3JQio0XlleAzczObMwFjU0ipI4dtsPpuDiPMh2p+grn3StBMi8MoWozXcI5KU0cscUrhH4u4R",
	"R1PsYbxXX0KSdiiFR5aq7f9Y9GY+50dmNKGO1aS1hcpiveTJM/amN5zO3QiGFTXJ0WdOWWqZ3yNNpJ5g",
	"uxvEK6KJtNafY8t39jPSPZolp3gz9pOsk6b9v4QL9N/LXlwMbP99Hy3Tma6Q7e4FfZLu/sYhjQUSDqX6",
	"qbugfy8YD+UgwFYjDi7+K6gRXd+g5NXmzF8IdN1aIYQ/AQAA//9wpnTC9QkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
