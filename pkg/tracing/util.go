package tracing

import (
	"context"
	"net/http"

	"github.com/inngest/inngest/pkg/execution/state"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/propagation"
	"go.opentelemetry.io/otel/trace"
)

func extractRunID(attrs []attribute.KeyValue) string {
	for _, attr := range attrs {
		if string(attr.Key) == "run_id" {
			return attr.Value.AsString()
		}
	}
	return ""
}

var propagator = propagation.TraceContext{}

// GetTraceparent gets the traceparent-compliant header from the given context.
// This is useful for passing the traceparent header to other services.
func GetTraceparent(ctx context.Context) string {
	carrier := propagation.HeaderCarrier(http.Header{})
	propagator.Inject(ctx, carrier)

	return carrier.Get("traceparent")
}

// ContextFromTraceparent creates a new context from the given traceparent
// string. This is useful for extracting the traceparent header from queue items
// to continue the correct lineage.
func contextFromTraceparent(ctx context.Context, traceparent string) context.Context {
	carrier := propagation.HeaderCarrier(http.Header{
		"traceparent": []string{traceparent},
	})

	return propagator.Extract(ctx, carrier)
}

// ApplyResponseToSpan applies details from the given `DriverResponse` to the
// given span. This is used for adding additional details to the span after the
// exectution has completed.
func ApplyResponseToSpan(span trace.Span, resp *state.DriverResponse) {
	if resp.IsDiscoveryResponse() {
		// We ignore discovery responses and rely on other spans to show steps
		// generated by handling opcodes later on.
		span.SetAttributes(attribute.Bool(AttributeExecutionIsDiscovery, true))
		return
	}

	// TODO
}
